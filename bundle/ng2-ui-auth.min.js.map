{"version":3,"file":"ng2-ui-auth.min.js","sources":["../src/utils.ts","../src/local.service.ts","../src/config.service.ts","../src/storage.service.ts","../src/shared.service.ts","../src/jwt-http.service.ts","../src/popup.service.ts","../src/oauth1.service.ts","../src/oauth2.service.ts","../src/oauth.service.ts","../src/auth.service.ts","../src/ng2-ui-auth.module.ts"],"sourcesContent":["/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function assign(target: any, ...src: any[]): any {\r\n    if (target == null) {\r\n        throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    target = Object(target);\r\n    for (var index = 1; index < arguments.length; index++) {\r\n        var source = arguments[index];\r\n        if (source != null) {\r\n            for (var key in source) {\r\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function joinUrl(baseUrl: string, url: string) {\r\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\r\n        return url;\r\n    }\r\n\r\n    let joined = [baseUrl, url].join('/');\r\n\r\n    let normalize = function(str) {\r\n        return str\r\n            .replace(/[\\/]+/g, '/')\r\n            .replace(/\\/\\?/g, '?')\r\n            .replace(/\\/\\#/g, '#')\r\n            .replace(/\\:\\//g, '://');\r\n    };\r\n\r\n    return normalize(joined);\r\n}\r\n\r\nexport function merge(obj1, obj2) {\r\n    let result = {};\r\n    for (var i in obj1) {\r\n        if (obj1.hasOwnProperty(i)) {\r\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\r\n                result[i] = merge(obj1[i], obj2[i]);\r\n            } else {\r\n                result[i] = obj1[i];\r\n            }\r\n        }\r\n    }\r\n    for (i in obj2) {\r\n        if (obj2.hasOwnProperty(i)) {\r\n            if (i in result) {\r\n                continue;\r\n            }\r\n            result[i] = obj2[i];\r\n        }\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function camelCase(name) {\r\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n        return offset ? letter.toUpperCase() : letter;\r\n    });\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {SharedService} from './shared.service';\r\nimport {ConfigService} from './config.service';\r\nimport {RequestOptionsArgs, Response} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\r\n    const opts = userOpts || {};\r\n    if (user) {\r\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\r\n    }\r\n    opts.method = opts.method || 'POST';\r\n    return opts;\r\n}\r\n\r\n@Injectable()\r\nexport class LocalService {\r\n    constructor(private http: JwtHttp,\r\n                private shared: SharedService,\r\n                private config: ConfigService) {}\r\n\r\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\r\n\r\n        return this.http.request(url, fullOpts)\r\n            .do((response: Response) => this.shared.setToken(response));\r\n    }\r\n\r\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\r\n\r\n        return this.http.request(url, getFullOpts(user, fullOpts));\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {RequestMethod, Response} from '@angular/http';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport interface IPopupOptions {\r\n    width?: number;\r\n    height?: number;\r\n    left?: number;\r\n    top?: number;\r\n}\r\n\r\nexport interface IOauth1Options {\r\n    url?: string;\r\n    name?: string;\r\n    popupOptions?: IPopupOptions;\r\n    redirectUri?: string;\r\n    authorizationEndpoint?: string;\r\n    oauthType?: string;\r\n    exchangeForToken?: boolean | ((options: {code?: string, state?: string}, userData?: any) => Observable<Response>);\r\n    method?: string | RequestMethod;\r\n}\r\n\r\nexport interface IOauth2Options extends IOauth1Options {\r\n    state?: string| (() => string);\r\n    defaultUrlParams?: string[];\r\n    responseType?: string;\r\n    responseParams?: {\r\n        code?: string;\r\n        clientId?: string;\r\n        redirectUri?: string;\r\n    };\r\n    clientId?: string;\r\n    scopeDelimiter?: string;\r\n    scopePrefix?: string;\r\n\r\n    requiredUrlParams?: string[];\r\n    optionalUrlParams?: string[];\r\n    scope?: string[]|string;\r\n    display?: string;\r\n}\r\n\r\nexport interface IProviders {\r\n    [provider: string]: IOauth2Options;\r\n}\r\n\r\nexport abstract class CustomConfig {\r\n    tokenRoot: string;\r\n    cordova: boolean;\r\n    baseUrl: string;\r\n    loginUrl: string;\r\n    signupUrl: string;\r\n    unlinkUrl: string;\r\n    tokenName: string;\r\n    tokenSeparator: string;\r\n    tokenPrefix: string;\r\n    authToken: string;\r\n    authHeader: string;\r\n    storageType: string;\r\n    providers: IProviders;\r\n    defaultHeaders: { [name: string]: string };\r\n    withCredentials: boolean;\r\n    autoRefreshToken: boolean;\r\n    refreshUrl: string;\r\n    refreshBeforeExpiration: number;\r\n    tryTokenRefreshIfUnauthorized: boolean;\r\n    resolveToken: (response: Response) => string;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    constructor(config?: CustomConfig) {\r\n        Object.keys(config).forEach((key) => {\r\n            if (typeof config[key] === \"undefined\") {\r\n                return;\r\n            }\r\n            if (key !== 'providers') {\r\n                this[key] = config[key];\r\n            } else {\r\n                Object.keys(config[key]).map(provider => {\r\n                    this.providers[provider] = Object.assign(\r\n                        this.providers[provider] || {},\r\n                        config.providers[provider]\r\n                    );\r\n                });\r\n            }\r\n        });\r\n    }\r\n    withCredentials = false;\r\n    tokenRoot = null;\r\n    baseUrl = '/';\r\n    loginUrl = '/auth/login';\r\n    signupUrl = '/auth/signup';\r\n    unlinkUrl = '/auth/unlink/';\r\n    refreshUrl = '/auth/refresh';\r\n    tokenName = 'token';\r\n    tokenSeparator = '_';\r\n    tokenPrefix = 'ng2-ui-auth';\r\n    authHeader = 'Authorization';\r\n    authToken = 'Bearer';\r\n    storageType = 'localStorage';\r\n    defaultHeaders = null;\r\n    autoRefreshToken = false;\r\n    refreshBeforeExpiration = 600000; //10 minutes\r\n    tryTokenRefreshIfUnauthorized = false;\r\n    cordova = this.isCordovaApp();\r\n    resolveToken = (response: Response|Object) => {\r\n        let tokenObj = response;\r\n        if (response instanceof Response) {\r\n            tokenObj = response.json();\r\n        }\r\n        const accessToken: string | Object | null | undefined = tokenObj &&\r\n            (tokenObj['access_token'] || tokenObj['token'] || tokenObj['data']);\r\n        if (!accessToken) {\r\n            console.warn('No token found');\r\n            return null;\r\n        }\r\n        if (typeof accessToken === 'string') {\r\n            return accessToken;\r\n        }\r\n        if (typeof accessToken !== 'object') {\r\n            console.warn('No token found');\r\n            return null;\r\n        }\r\n        const tokenRootData = this.tokenRoot &&\r\n            this.tokenRoot.split('.').reduce(\r\n                (o, x) => {\r\n                    return o[x];\r\n                },\r\n                accessToken);\r\n        const token = tokenRootData ? tokenRootData[this.tokenName] : accessToken[this.tokenName];\r\n        if (token) {\r\n            return token;\r\n        }\r\n        let tokenPath = this.tokenRoot ? this.tokenRoot + '.' + this.tokenName : this.tokenName;\r\n        console.warn('Expecting a token named \"' + tokenPath);\r\n        return null;\r\n    };\r\n    providers: IProviders = {\r\n        facebook: {\r\n            name: 'facebook',\r\n            url: '/auth/facebook',\r\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n            redirectUri: this.getHttpHost('/'),\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 580, height: 400}\r\n        },\r\n        google: {\r\n            name: 'google',\r\n            url: '/auth/google',\r\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n            redirectUri: this.getHttpHost(),\r\n            requiredUrlParams: ['scope'],\r\n            optionalUrlParams: ['display', 'state', 'prompt', 'login_hint', 'access_type', 'include_granted_scopes', 'openid.realm', 'hd'],\r\n            scope: ['profile', 'email'],\r\n            scopePrefix: 'openid',\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 452, height: 633},\r\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\r\n        },\r\n        github: {\r\n            name: 'github',\r\n            url: '/auth/github',\r\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n            redirectUri: this.getHttpHost(),\r\n            optionalUrlParams: ['scope'],\r\n            scope: ['user:email'],\r\n            scopeDelimiter: ' ',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 1020, height: 618}\r\n        },\r\n        instagram: {\r\n            name: 'instagram',\r\n            url: '/auth/instagram',\r\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n            redirectUri: this.getHttpHost(),\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['basic'],\r\n            scopeDelimiter: '+',\r\n            oauthType: '2.0'\r\n        },\r\n        linkedin: {\r\n            name: 'linkedin',\r\n            url: '/auth/linkedin',\r\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n            redirectUri: this.getHttpHost(),\r\n            requiredUrlParams: ['state'],\r\n            scope: ['r_emailaddress'],\r\n            scopeDelimiter: ' ',\r\n            state: 'STATE',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 527, height: 582}\r\n        },\r\n        twitter: {\r\n            name: 'twitter',\r\n            url: '/auth/twitter',\r\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n            redirectUri: this.getHttpHost(),\r\n            oauthType: '1.0',\r\n            popupOptions: {width: 495, height: 645}\r\n        },\r\n        twitch: {\r\n            name: 'twitch',\r\n            url: '/auth/twitch',\r\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n            redirectUri: this.getHttpHost(),\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user_read'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        live: {\r\n            name: 'live',\r\n            url: '/auth/live',\r\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n            redirectUri: this.getHttpHost(),\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['wl.emails'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        yahoo: {\r\n            name: 'yahoo',\r\n            url: '/auth/yahoo',\r\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n            redirectUri: this.getHttpHost(),\r\n            scope: [],\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 559, height: 519}\r\n        },\r\n        bitbucket: {\r\n            name: 'bitbucket',\r\n            url: '/auth/bitbucket',\r\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n            redirectUri: this.getHttpHost('/'),\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 1028, height: 529}\r\n        },\r\n        spotify: {\r\n            name: 'spotify',\r\n            url: '/auth/spotify',\r\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\r\n            redirectUri: this.getHttpHost(),\r\n            optionalUrlParams: ['state'],\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user-read-email'],\r\n            scopePrefix: '',\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: { width: 500, height: 530 },\r\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2))\r\n        }\r\n    };\r\n\r\n    getHttpHost(path = '') {\r\n        return window.location.origin + path;\r\n    }\r\n\r\n    isCordovaApp() {\r\n        return !!window['cordova'];\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ConfigService} from './config.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n@Injectable()\r\nexport class StorageService {\r\n    private store = {};\r\n    private isStorageAvailable: boolean;\r\n    constructor(private config: ConfigService) {\r\n        this.isStorageAvailable = (() => {\r\n            try {\r\n                let supported = config.storageType in window && window[config.storageType] !== null;\r\n\r\n                if (supported) {\r\n                    let key = Math.random().toString(36).substring(7);\r\n                    (<any>window[this.config.storageType]).setItem(key, '');\r\n                    (<any>window[this.config.storageType]).removeItem(key);\r\n                }\r\n\r\n                return supported;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })();\r\n        if (!this.isStorageAvailable) {\r\n            console.warn(config.storageType + ' is not available.');\r\n        }\r\n    }\r\n    get(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\r\n    }\r\n    set(key: string, value: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\r\n    }\r\n    remove(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\nimport {Injectable} from '@angular/core';\r\nimport {Response} from '@angular/http';\r\nimport {ConfigService} from './config.service';\r\nimport {StorageService} from './storage.service';\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class SharedService {\r\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\r\n    constructor(private storage: StorageService, private config: ConfigService) {}\r\n    getToken() {\r\n        return this.storage.get(this.tokenName);\r\n    }\r\n    getPayload() {\r\n        let token = this.getToken();\r\n\r\n        if (token && token.split('.').length === 3) {\r\n            try {\r\n                let base64Url = token.split('.')[1];\r\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    setToken(response: string | Response | Object) {\r\n        if (!response) {\r\n            console.warn('Can\\'t set token without passing a value');\r\n            return;\r\n        }\r\n\r\n        let token: string;\r\n        if (typeof response === 'string') {\r\n            token = response;\r\n        } else {\r\n            token = this.config.resolveToken(response)\r\n        }\r\n\r\n        if (token) {\r\n            this.storage.set(this.tokenName, token);\r\n        }\r\n    }\r\n    removeToken() {\r\n        this.storage.remove(this.tokenName);\r\n    }\r\n    isAuthenticated() {\r\n        let token = this.getToken();\r\n\r\n        // a token is present\r\n        if (token) {\r\n            // token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n                // could be a valid JWT or an access token with the same format\r\n                try {\r\n                    let base64Url = token.split('.')[1];\r\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                    let exp = JSON.parse(window.atob(base64)).exp;\r\n                    // jwt with an optional expiration claims\r\n                    if (exp) {\r\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                        if (isExpired) {\r\n                            // fail: Expired token\r\n                            this.storage.remove(this.tokenName);\r\n                            return false;\r\n                        } else {\r\n                            // pass: Non-expired token\r\n                            return true;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // pass: Non-JWT token that looks like JWT\r\n                    return true;\r\n                }\r\n            }\r\n            // pass: All other tokens\r\n            return true;\r\n        }\r\n        // lail: No token at all\r\n        return false;\r\n    }\r\n    getExpirationDate() {\r\n        let payload = this.getPayload();\r\n        if (payload && payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\r\n            let date = new Date(0);\r\n            date.setUTCSeconds(payload.exp);\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n    logout(): Observable<any> {\r\n        this.storage.remove(this.tokenName);\r\n        return Observable.create((observer: Subscriber<any>) => {\r\n            observer.next();\r\n            observer.complete();\r\n        });\r\n    }\r\n    setStorageType(type) {\r\n        this.config.storageType = type;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/operator/catch';\r\nimport {ConfigService} from './config.service';\r\nimport {SharedService} from './shared.service';\r\n/**\r\n * Created by Ron on 06/01/2016.\r\n */\r\n\r\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\r\n    autoRefreshToken?: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class JwtHttp {\r\n    constructor(\r\n        private _http: Http,\r\n        private _shared: SharedService,\r\n        private _config: ConfigService\r\n    ) {}\r\n\r\n    request(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        //if the token is expired the \"getExpirationDate\" function returns null\r\n        const exp = this._shared.getExpirationDate();\r\n        if (this._shared.getToken() &&\r\n            (!exp || exp.getTime() + this._config.refreshBeforeExpiration > Date.now())  &&\r\n            (options.autoRefreshToken ||\r\n            typeof options.autoRefreshToken === 'undefined' && this._config.autoRefreshToken)) {\r\n            return this.refreshToken()\r\n                .switchMap(() => this.actualRequest(url, options));\r\n        }\r\n        if (this._config.tryTokenRefreshIfUnauthorized) {\r\n            return this.actualRequest(url, options)\r\n                .catch((response: Response) => {\r\n                    if (response.status === 401) {\r\n                        return this.refreshToken()\r\n                            .switchMap(() => this.actualRequest(url, options));\r\n                    }\r\n                    throw response;\r\n                })\r\n        }\r\n        return this.actualRequest(url, options);\r\n    }\r\n\r\n    get(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Get;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    post(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Post;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    put(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Put;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    delete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Delete;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    patch(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Patch;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    head(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Head;\r\n        return this.request(url, options);\r\n    }\r\n\r\n\r\n    refreshToken(): Observable<Response> {\r\n        const authHeader = new Headers();\r\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\r\n        return this._http\r\n            .get(this._config.refreshUrl, {\r\n                headers: authHeader\r\n            })\r\n            .do((res: Response) => this._shared.setToken(res));\r\n    }\r\n\r\n    protected actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\r\n        if (url instanceof Request) {\r\n            url.headers = url.headers || new Headers();\r\n            this.setHeaders(url);\r\n        } else {\r\n            options = options || {};\r\n            this.setHeaders(options);\r\n        }\r\n        return this._http.request(url, options);\r\n    }\r\n\r\n    protected setHeaders(obj: { headers?: Headers, [index: string]: any }) {\r\n        obj.headers = obj.headers || new Headers();\r\n        if (this._config.defaultHeaders) {\r\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\r\n                if (!obj.headers.has(defaultHeader)) {\r\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\r\n                }\r\n            });\r\n        }\r\n        if (this._shared.isAuthenticated()) {\r\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign} from './utils';\r\nimport {ConfigService, IPopupOptions} from './config.service';\r\nimport 'rxjs/add/observable/interval';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/observable/empty';\r\nimport 'rxjs/add/observable/merge';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/map';\r\n\r\nimport 'rxjs/add/operator/takeWhile';\r\nimport 'rxjs/add/operator/delay';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class PopupService {\r\n    url = '';\r\n    popupWindow: Window = null;\r\n\r\n    private static prepareOptions(options: IPopupOptions) {\r\n        options = options || {};\r\n        let width = options.width || 500;\r\n        let height = options.height || 500;\r\n        return assign(\r\n            {\r\n                width: width,\r\n                height: height,\r\n                left: window.screenX + ((window.outerWidth - width) / 2),\r\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\r\n            },\r\n            options);\r\n    }\r\n\r\n    private static stringifyOptions(options: Object) {\r\n        return Object.keys(options).map((key) => {\r\n            return key + '=' + options[key];\r\n        }).join(',');\r\n    }\r\n\r\n    private static parseQueryString(joinedKeyValue: string): any {\r\n        let key, value;\r\n        return joinedKeyValue.split('&').reduce(\r\n            (obj, keyValue) => {\r\n                if (keyValue) {\r\n                    value = keyValue.split('=');\r\n                    key = decodeURIComponent(value[0]);\r\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\r\n                }\r\n                return obj;\r\n            },\r\n            {});\r\n    }\r\n\r\n\r\n    constructor(private config: ConfigService) {}\r\n    open(url: string, name: string, options: IPopupOptions) {\r\n        this.url = url;\r\n\r\n        let stringifiedOptions = PopupService.stringifyOptions(PopupService.prepareOptions(options));\r\n        let UA = window.navigator.userAgent;\r\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\r\n\r\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\r\n\r\n        window['popup'] = this.popupWindow;\r\n\r\n        if (this.popupWindow && this.popupWindow.focus) {\r\n            this.popupWindow.focus();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    eventListener(redirectUri: string) {\r\n        return Observable\r\n            .merge(\r\n                Observable.fromEvent(this.popupWindow, 'loadstart')\r\n                .switchMap((event: Event & { url: string }) => {\r\n\r\n                    if (!this.popupWindow || this.popupWindow.closed) {\r\n                        return Observable.throw(new Error('Authentication Canceled'));\r\n                    }\r\n                    if (event.url.indexOf(redirectUri) !== 0) {\r\n                        return Observable.empty();\r\n                    }\r\n\r\n                    let parser = document.createElement('a');\r\n                    parser.href = event.url;\r\n\r\n                    if (parser.search || parser.hash) {\r\n                        const queryParams = parser.search.substring(1).replace(/\\/$/, '');\r\n                        const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\r\n                        const hash = PopupService.parseQueryString(hashParams);\r\n                        const qs = PopupService.parseQueryString(queryParams);\r\n                        const allParams = assign({}, qs, hash);\r\n\r\n                        this.popupWindow.close();\r\n\r\n                        if (allParams.error) {\r\n                            throw allParams.error;\r\n                        } else {\r\n                            return Observable.of(allParams);\r\n                        }\r\n                    }\r\n                    return Observable.empty();\r\n                }), Observable.fromEvent<Event>(this.popupWindow, 'exit').delay(100).map(() => {throw new Error('Authentication Canceled')})\r\n                       ).take(1);\r\n    }\r\n\r\n    pollPopup() {\r\n        return Observable\r\n            .interval(50)\r\n            .switchMap(() => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return Observable.throw(new Error('Authentication Canceled'));\r\n                }\r\n                let documentOrigin = document.location.host;\r\n                let popupWindowOrigin = '';\r\n                try {\r\n                    popupWindowOrigin = this.popupWindow.location.host;\r\n                } catch (error) {\r\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\r\n                    //error instanceof DOMException && error.name === 'SecurityError'\r\n                }\r\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\r\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\r\n                    const hash = PopupService.parseQueryString(hashParams);\r\n                    const qs = PopupService.parseQueryString(queryParams);\r\n                    this.popupWindow.close();\r\n                    const allParams = assign({}, qs, hash);\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return Observable.of(allParams);\r\n                    }\r\n                }\r\n                return Observable.empty();\r\n            })\r\n            .take(1);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PopupService} from './popup.service';\r\nimport {Response} from '@angular/http';\r\nimport {assign, joinUrl} from './utils';\r\nimport {ConfigService, IOauth1Options} from './config.service';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth1Service {\r\n    private static base: IOauth1Options = {\r\n        url: null,\r\n        name: null,\r\n        popupOptions: null,\r\n        redirectUri: null,\r\n        authorizationEndpoint: null\r\n    };\r\n    private defaults: IOauth1Options;\r\n\r\n    constructor(private http: JwtHttp, private popup: PopupService, private config: ConfigService) {\r\n    }\r\n\r\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\r\n        this.defaults = assign({}, Oauth1Service.base, options);\r\n        let popupWindow;\r\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        if (!this.config.cordova) {\r\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\r\n        }\r\n\r\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\r\n            .switchMap((response: Response) => {\r\n                if (this.config.cordova) {\r\n                    popupWindow = this.popup.open(\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\r\n                        this.defaults.name,\r\n                        this.defaults.popupOptions);\r\n                } else {\r\n                    popupWindow.popupWindow.location =\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\r\n                }\r\n\r\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\r\n            })\r\n            .switchMap((response) => {\r\n                let exchangeForToken: any = options.exchangeForToken;\r\n                if (typeof exchangeForToken !== 'function') {\r\n                    exchangeForToken = this.exchangeForToken.bind(this);\r\n                }\r\n                return exchangeForToken(response, userData);\r\n            });\r\n    }\r\n\r\n    private exchangeForToken(oauthData, userData?: any) {\r\n        let data = assign({}, this.defaults, oauthData, userData);\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n        return this.defaults.method\r\n            ? this.http.request(exchangeForTokenUrl, {\r\n                body: JSON.stringify(data),\r\n                withCredentials: this.config.withCredentials,\r\n                method: this.defaults.method\r\n            })\r\n            : this.http.post(exchangeForTokenUrl, data, {withCredentials: this.config.withCredentials});\r\n    }\r\n\r\n    private buildQueryString(obj: Object) {\r\n        return Object.keys(obj).map((key) => {\r\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign, camelCase, joinUrl, merge} from './utils';\r\nimport {ConfigService, IOauth2Options} from './config.service';\r\nimport {PopupService} from './popup.service';\r\nimport {StorageService} from './storage.service';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/observable/of';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth2Service {\r\n    private static base: IOauth2Options = {\r\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\r\n        responseType: 'code',\r\n        responseParams: {\r\n            code: 'code',\r\n            clientId: 'clientId',\r\n            redirectUri: 'redirectUri'\r\n        }\r\n    };\r\n\r\n    private defaults: IOauth2Options;\r\n\r\n    constructor(private http: JwtHttp,\r\n                private popup: PopupService,\r\n                private storage: StorageService,\r\n                private config: ConfigService) {\r\n    }\r\n\r\n    open(options: IOauth2Options, userData?: any) {\r\n        this.defaults = merge(options, Oauth2Service.base);\r\n\r\n        let url;\r\n        let openPopup: Observable<any>;\r\n        let stateName = this.defaults.name + '_state';\r\n        let state = this.defaults.state;\r\n        if (typeof state === 'string') {\r\n            this.storage.set(stateName, state);\r\n        } else if (typeof state === 'function') {\r\n            this.storage.set(stateName, state());\r\n        }\r\n\r\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\r\n\r\n        if (this.config.cordova) {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .eventListener(this.defaults.redirectUri);\r\n        } else {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .pollPopup();\r\n        }\r\n\r\n        return openPopup\r\n            .switchMap((oauthData) => {\r\n                // when no server URL provided, return popup params as-is.\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (!options.exchangeForToken && (this.defaults.responseType === 'token' || !this.defaults.url)) {\r\n                    return Observable.of(oauthData);\r\n                }\r\n\r\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\r\n                    throw 'OAuth \"state\" mismatch';\r\n                }\r\n                let exchangeForToken: any = options.exchangeForToken;\r\n                if (typeof exchangeForToken !== 'function') {\r\n                    exchangeForToken = this.exchangeForToken.bind(this);\r\n                }\r\n                return exchangeForToken(oauthData, userData);\r\n            });\r\n    }\r\n\r\n    private exchangeForToken(oauthData: { code?: string, state?: string }, userData?: {}) {\r\n        let data: any = assign({}, this.defaults, oauthData, userData);\r\n\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        return this.defaults.method\r\n            ? this.http.request(exchangeForTokenUrl, {\r\n                body: JSON.stringify(data),\r\n                withCredentials: this.config.withCredentials,\r\n                method: this.defaults.method\r\n            })\r\n            : this.http.post(exchangeForTokenUrl, JSON.stringify(data), {withCredentials: this.config.withCredentials});\r\n    }\r\n\r\n    private buildQueryString() {\r\n        let keyValuePairs: string[][] = [];\r\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\r\n\r\n        urlParams.forEach((params) => {\r\n            if (this.defaults[params]) {\r\n                (<string[]>this.defaults[params]).forEach((paramName) => {\r\n                    let camelizedName = camelCase(paramName);\r\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\r\n                        this.defaults[paramName]() :\r\n                        this.defaults[camelizedName];\r\n\r\n                    if (paramName === 'state') {\r\n                        let stateName = this.defaults.name + '_state';\r\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\r\n                    }\r\n\r\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\r\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\r\n\r\n                        if (this.defaults.scopePrefix) {\r\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\r\n                        }\r\n                    }\r\n\r\n                    if (params !== 'optionalUrlParams' || typeof paramValue !== 'undefined') {\r\n                        keyValuePairs.push([paramName, paramValue]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return keyValuePairs.map(function (pair) {\r\n            return pair.join('=');\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Oauth1Service} from './oauth1.service';\r\nimport {Oauth2Service} from './oauth2.service';\r\nimport {SharedService} from './shared.service';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {ConfigService, IOauth1Options} from './config.service';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class OauthService {\r\n    constructor(private http: JwtHttp,\r\n                private injector: Injector,\r\n                private shared: SharedService,\r\n                private config: ConfigService) {}\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\r\n        const provider: { open(options?: IOauth1Options, userData?: any): Observable<Response> } = this.config.providers[name].oauthType === '1.0' ? this.injector.get(Oauth1Service) : this.injector.get(Oauth2Service);\r\n        return provider.open(this.config.providers[name], userData || {})\r\n            .do((response: Response) => {\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.config.providers[name].url) {\r\n                    this.shared.setToken(response);\r\n                }\r\n            });\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs) {\r\n        opts = opts || {};\r\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\r\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\r\n        opts.method = opts.method || 'POST';\r\n\r\n        return this.http.request(url, opts);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {SharedService} from './shared.service';\r\nimport {LocalService} from './local.service';\r\nimport {OauthService} from './oauth.service';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    constructor(private shared: SharedService,\r\n                private local: LocalService,\r\n                private oauth: OauthService) {\r\n    }\r\n\r\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.login(user, opts);\r\n    }\r\n\r\n    signup(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.signup(user, opts);\r\n    }\r\n\r\n    logout(): Observable<void> {\r\n        return this.shared.logout();\r\n    }\r\n\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n\r\n    link(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n\r\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\r\n        return this.oauth.unlink(provider, opts);\r\n    }\r\n\r\n    isAuthenticated(): boolean {\r\n        return this.shared.isAuthenticated();\r\n    }\r\n\r\n    getToken(): string {\r\n        return this.shared.getToken();\r\n    }\r\n\r\n    setToken(token: string | Response): void {\r\n        this.shared.setToken(token);\r\n    }\r\n\r\n    removeToken(): void {\r\n        this.shared.removeToken();\r\n    }\r\n\r\n    getPayload(): any {\r\n        return this.shared.getPayload();\r\n    }\r\n\r\n    setStorageType(type: string): void {\r\n        this.shared.setStorageType(type);\r\n    }\r\n\r\n    getExpirationDate(): Date {\r\n        return this.shared.getExpirationDate();\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 25/12/2015.\r\n */\r\nimport {CustomConfig, ConfigService} from './config.service';\r\nimport {SharedService} from './shared.service';\r\nimport {JwtHttp} from './jwt-http.service';\r\nimport {OauthService} from './oauth.service';\r\nimport {PopupService} from './popup.service';\r\nimport {Oauth1Service} from './oauth1.service';\r\nimport {Oauth2Service} from './oauth2.service';\r\nimport {LocalService} from './local.service';\r\nimport {AuthService} from './auth.service';\r\nimport {StorageService} from './storage.service';\r\nimport {ModuleWithProviders, NgModule, Injector, Type} from '@angular/core';\r\nimport {HttpModule, Http} from '@angular/http';\r\nexport {LocalService} from './local.service';\r\nexport {Oauth2Service} from './oauth2.service';\r\nexport {Oauth1Service} from './oauth1.service';\r\nexport {PopupService} from './popup.service';\r\nexport {OauthService} from './oauth.service';\r\nexport {JwtHttp} from './jwt-http.service';\r\nexport {SharedService} from './shared.service';\r\nexport {StorageService} from './storage.service';\r\nexport {AuthService} from './auth.service';\r\nexport {ConfigService, CustomConfig} from './config.service';\r\n\r\n@NgModule({\r\n    imports: [HttpModule]\r\n})\r\nexport class Ng2UiAuthModule {\r\n    static forRootWithCustomHttp(config: Type<CustomConfig>, httpProvider: any): ModuleWithProviders {\r\n        return {\r\n            ngModule: Ng2UiAuthModule,\r\n            providers: [\r\n                {provide: CustomConfig, useClass: config },\r\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\r\n                {provide: StorageService, useClass: StorageService, deps: [ConfigService]},\r\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\r\n                httpProvider,\r\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\r\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\r\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\r\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\r\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\r\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\r\n        }\r\n    }\r\n\r\n    static forRoot(config: Type<CustomConfig>): ModuleWithProviders {\r\n        return {\r\n            ngModule: Ng2UiAuthModule,\r\n            providers: [\r\n                {provide: CustomConfig, useClass: config },\r\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\r\n                {provide: StorageService, useClass: StorageService, deps: [ConfigService]},\r\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\r\n                {provide: JwtHttp, useClass: JwtHttp, deps: [Http, SharedService, ConfigService]},\r\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\r\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\r\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\r\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\r\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\r\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\r\n        }\r\n    }\r\n}\r\n"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","this","isCordovaApp","response","tokenObj","Response","json","accessToken","console","warn","tokenRootData","_this","tokenRoot","split","reduce","o","x","token","tokenName","tokenPath","facebook","authorizationEndpoint","redirectUri","getHttpHost","requiredUrlParams","scope","scopeDelimiter","display","oauthType","popupOptions","width","height","google","optionalUrlParams","scopePrefix","state","encodeURIComponent","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","keys","forEach","map","provider","providers","assign","ConfigService","path","window","location","origin","Injectable","isStorageAvailable","supported","storageType","substring","setItem","removeItem","e","StorageService","getItem","store","value","storage","tokenPrefix","tokenSeparator","SharedService","get","getToken","base64Url","base64","parse","decodeURIComponent","atob","resolveToken","set","remove","exp","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","type","_http","_shared","_config","JwtHttp","options","getExpirationDate","refreshBeforeExpiration","now","autoRefreshToken","refreshToken","switchMap","actualRequest","tryTokenRefreshIfUnauthorized","catch","status","RequestMethod","Get","request","Post","Put","Delete","Patch","Head","authHeader","Headers","append","authToken","refreshUrl","headers","do","res","setToken","Request","setHeaders","obj","defaultHeaders","defaultHeader","has","isAuthenticated","PopupService","left","screenX","outerWidth","top","screenY","outerHeight","joinedKeyValue","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","event","closed","throw","Error","empty","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","of","delay","take","interval","documentOrigin","host","popupWindowOrigin","http","popup","Oauth1Service","userData","defaults","base","serverUrl","joinUrl","post","buildQueryString","eventListener","pollPopup","exchangeForToken","bind","oauthData","data","exchangeForTokenUrl","withCredentials","Oauth2Service","openPopup","stateName","responseType","keyValuePairs","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","injector","shared","OauthService","unlinkUrl","LocalService","fullOpts","getFullOpts","loginUrl","signupUrl","local","oauth","AuthService","login","signup","logout","authenticate","unlink","removeToken","setStorageType","Ng2UiAuthModule","httpProvider","ngModule","provide","CustomConfig","useClass","deps","Injector","Http","NgModule","imports","HttpModule"],"mappings":"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"}